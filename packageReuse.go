/**
 *	使用包实现代码复用
 * 	导入包
 * 	使用第三方包
 * 	安装第三方包
 * 	管理第三方包依赖
 * 	创建包
 *
 * 	在Go语言中，包用于将代码编组，以便在Go程序中导入并使用它们。本章介绍包以及如何使用它们来创建Go程序，还将介绍依赖管理以及如何创建并分享包
 *
 * 	导入包
 * 		为理解如何导入并使用包，我们来看使用Go语言编写的简单Hello World！程序
 * 		Go程序以package语句开头。main包是一种特殊的包，其特殊之处在于不能导入。对main包的唯一要求是，必须声明一个main函数，这个函数不接受任何参数且不返回任何值。简而言之
 * 	main包是程序的入口
 *		导入包并使用其中导出的标识符，是重用标准库和其他第三方代码的基本方式。这种方式虽然简单，但您必须理解，灵活性和代码重用在很大程度上都是通过这种方式实现的。
 *
 * 	理解包的用途
 * 		要了解如何使用包，先得知道该使用哪个包。在标准库中，Go语言设计者采用了一致的命名约定，以帮助程序员明白包是如何组织的。在Go语言中，包名短小精悍又含义丰富。strings包包含
 * 	用于处理字符串的函数，bytes包包含用于处理字节的函数。随着Go语言的使用经验越来越丰富，您就会知道哪些包是用于完成任务的；如果实在记不起来，还可以参阅直观而组织良好的文档。
 * 		假设您要在程序中操作字符串，那么通过阅读标准库包清单，您可能发现有一个strings包。您可在程序中导入并使用这个包！但如何知道它提供了哪些功能呢？Go语言的文档很完善，而对于
 * 	标准库中的包，都有卓越的文档。对于strings包，其文档可在Go语言官网找到。
 * 		在这个文档中，列出了所有被导出的标识符。假设您需要在程序中将字符串转换为小写，通过查看文档可知，有一个名为ToLower的函数。文档还指出这个函数将一个字符串作为参数，并返回一个
 * 	字符串。
 *
 * 	使用第三方包
 * 		标准库提供了很多功能，但Go语言的设计理念是确保核心标准库小巧而稳定，因此标准库没有提供连接到数据库、分析文件格式以及实现身份验证协议的功能。不用多久，标准库就无法满足您编写
 * 	程序的需求了。在这种情况下，程序员有两种选择
 * 		自己编写解决问题的代码
 * 		寻找能够解决问题的包（或库代码）。
 * 		大部分程序员很可能选择第二种做法，然而，在程序中添加额外的依赖要三思而行，因为这可能影响程序的稳定性和可维护性。考虑使用第三方库时，您应自问如下几个问题。
 * 			我明白了这些代码是做什么的吗？
 * 			这些代码值得信任吗？
 * 			这些代码的维护情况如何？
 * 			我真的需要这个库吗？
 *		回答这些问题时，请考虑如下几点。
 * 			明白包的作用至关重要。优秀的第三方包都有卓越的文档，这些文档通常遵循Go语言文档约定，指出了它们导出了哪些标识符。通过阅读文档，可确定包是否提供了您需要的功能。
 * 			确定第三方包值得信任很重要。别忘了，将包导入程序后，它就能访问底层的操作系统。要确定第三方包的可信任程度，可了解还有多少人在使用它、是否有同事推荐，还可阅读其
 * 		源代码
 * 			考虑到软件的特征，第三方包不可避免地存在Bug。不要选择几年都没有更新的包，而应选择开发方积极维护的第三方包，因为这意味着随着时间的推移，这样的包会越来越稳定。
 * 			导入第三方包会增加程序的复杂性。很多时候导入一个包只为了使用其中一个函数，在这种情况下，可复制这个函数，而不导入整个包。
 *
 * 	安装第三方包
 * 		要使用第三方库，必须像使用标准库一样使用import语句导入它
 * 		要使用第三方包，必须先使用go get安装它，它将指向远程服务器中包的路径作为参数，并在本地安装指定的包。这个包被安装到环境变量GOPATH/go/src中
 * 		安装这个包后，就可以导入它了
 * 		go get,它会下载依赖的第三方包，自动解决包与包之间的依赖关系
 * 		go get 常用命令
 * 			更新特定的包
 * 			go get -u github.com/spf13/hugo
 * 			更新文件系统中所有的包
 * 			go get -u all
 *
 * 		命令go get从与本地分支匹配的远程分支中获取源代码，例如，如果本地分支为master，则这个命令将从远程分支master获取最新的源代码。
 *
 *
 */
package main

import (
	"fmt"
	"github.com/golang/example/stringutil"
	"math"
	"strings"
)

func main() {
	fmt.Println("Hello World！")
	/**
	 *	在main包中，可使用import声明来导入其他包，导入包后，就可使用其中被导出的（即公有的）标识符。在Go语言中，标识符可以是变量、常量、类型、函数或方法。这让包能够通过接口提供
	 * 	各种功能。例如math包提供了常量Pi。
	 */
	fmt.Println(math.Pi)
	/**
	 *	将字符串转换为小写
	 */
	fmt.Println(strings.ToLower("STOP SHUTING!"))
	/**
	 *	使用第三方包stringutil中Reverse函数反转字符串
	 */
	s := "ti esrever dna tipilf nwod gniht ym tup I"
	fmt.Println(stringutil.Reverse(s))
}
